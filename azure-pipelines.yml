name: PR-$(System.PullRequest.PullRequestNumber)-$(Date:yyyyMMdd)$(Rev:.rr)

jobs:
- job: windows

  pool:
    vmImage: windows-2019

  steps:
  - checkout: self
    clean: true
  
  - powershell: |
      $PSVersionTable
    name: WindowsPowerShellVersion
    displayName: 'Windows PowerShell: Version'
    condition: succeededOrFailed()

  - powershell: |
      Get-Module -ListAvailable
    name: WindowsPowerShellVersionModules
    displayName: 'Windows PowerShell: Getting installed modules'
    condition: succeededOrFailed()

  - powershell: |
        Install-Module -Name Pester -MinimumVersion 4.7.3 -Repository PSGallery -Force #-SkipPublisherCheck
    name: WindowsPowerShellInstallPester
    displayName: 'Windows PowerShell: Install Pester'
    condition: succeededOrFailed()

  - powershell: |
      Get-Module -Name Pester -ListAvailable
    name: WindowsPowerShellPesterVersion
    displayName: 'Windows PowerShell: Pester Version'
    condition: succeededOrFailed()

  - powershell: |
      Invoke-Pester .\Tests\sthTest.tests.ps1 -OutputFile .\testResults.xml -OutputFormat NUnitXml -CodeCoverage .\sthTest.ps1 -CodeCoverageOutputFile .\codeCoverage.xml -CodeCoverageOutputFileFormat JaCoCo
    name: WindowsPowerShellInvokePester
    displayName: 'Windows PowerShell: Test with Pester'
    condition: succeededOrFailed()

  - powershell: |
      Get-ChildItem
    name: WindowsPowerShellGetFiles
    displayName: 'Windows PowerShell: List Files'
    condition: succeededOrFailed()

  - task: PublishTestResults@2
    name: WindowsPowerShellPublishTestResult
    displayName: 'Windows PowerShell: Publish Test Results'
    inputs:
      testRunner: 'NUnit'
      testResultsFiles: 'testResults.xml' 
      searchFolder: '$(System.DefaultWorkingDirectory)'
      testRunTitle: 'Windows PowerShell: Pester'
      failTaskOnFailedTests: true
    condition: succeededOrFailed()

  - task: PublishCodeCoverageResults@1
    name: WindowsPowerShellPublishCodeCoverage
    displayName: 'Windows PowerShell: Publish Code Coverage'
    inputs:
      codeCoverageTool: 'JaCoCo'
      summaryFileLocation: $(System.DefaultWorkingDirectory)/codeCoverage.xml
    condition: succeededOrFailed()

  - template: azure-pipelines.steps.yml
    parameters:
      os: Windows



- job: macos

  pool:
    vmImage: macOS-10.13

  steps:
    - checkout: self
      clean: true
    
    - template: azure-pipelines.steps.yml
      parameters:
        os: macOS

- job: linux

  pool:
    vmImage: ubuntu-16.04

  steps:
    - checkout: self
      clean: true
    
    - powershell: |
        $PSVersionTable
      name: PSVersionTable
      displayName: Getting PSVersionTable variable
      condition: succeededOrFailed()

    - powershell: |
        Get-Module -ListAvailable
      name: ModulesInstalled
      displayName: Getting installed modules
      condition: succeededOrFailed()

    # - powershell: |
    #     $PSVersionTable
    #   name: PSVersionTable_pwsh
    #   displayName: Getting PSVersionTable variable in pwsh
    #   condition: succeededOrFailed()
    #   # pwsh: true
    #   enabled: false

  # # PowerShell!
  # # Run a PowerShell script on Windows, macOS, or Linux.!!
  #   - task: PowerShell@2
  #     name: pwsh_check
  #     displayName: PowerShell Core Check
  #     inputs:
  #       targetType: 'inline' # Optional. Options: filePath, inline
  #       #filePath: # Required when targetType == FilePath
  #       #arguments: # Optional
  #       #script: '# Write your powershell commands here.' # Required when targetType == Inline
  #       script: '$PSVersionTable' # Required when targetType == Inline
  #       #errorActionPreference: 'stop' # Optional. Options: stop, continue, silentlyContinue
  #       #failOnStderr: false # Optional
  #       #ignoreLASTEXITCODE: false # Optional
  #       pwsh: true # Optional
  #       #workingDirectory: # Optional


    # PowerShell Core - Test
    - task: PowerShell@2
      name: installPesterCore
      displayName: PowerShell Core - Install Pester
      inputs:
        targetType: 'inline'
        script: |
          Get-Module -Name Pester -ListAvailable
          Install-Module -Name Pester -MinimumVersion 4.7.3 -Repository PSGallery -Force -Scope CurrentUser #-SkipPublisherCheck
          Get-Module -Name Pester -ListAvailable
        pwsh: true
      condition: succeededOrFailed()

    - task: PowerShell@2
      name: invokePesterCore
      displayName: PowerShell Core - Test with Pester
      inputs:
        targetType: 'inline'
        script: |
          Invoke-Pester .\Tests\sthTest.tests.ps1 -OutputFile .\testResultsCore.xml -OutputFormat NUnitXml -CodeCoverage .\sthTest.ps1 -CodeCoverageOutputFile .\codeCoverageCore.xml -CodeCoverageOutputFileFormat JaCoCo
        pwsh: true
      condition: succeededOrFailed()

  # Publish Test Results
  # Publish Test Results to Azure Pipelines/TFS
    - task: PublishTestResults@2
      inputs:
        testRunner: 'NUnit' # Options: JUnit, NUnit, VSTest, XUnit
        testResultsFiles: 'testResultsCore.xml' 
        searchFolder: '$(System.DefaultWorkingDirectory)' # Optional
        #mergeTestResults: false # Optional
        testRunTitle: Pester - PowerShell Core # Optional
        #platform: # Optional
        #configuration: # Optional
        #publishRunAttachments: true # Optional
      condition: succeededOrFailed()
      name: publishTestResultsCore
      displayName: Publishing Test Results for PowerShell Core


  # Publish Code Coverage Results
  # Publish Cobertura or JaCoCo code coverage results from a build
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'JaCoCo' # Options: cobertura, jaCoCo
        # summaryFileLocation: codeCoverage.xml
        summaryFileLocation: $(System.DefaultWorkingDirectory)/codeCoverageCore.xml
        #reportDirectory: # Optional
        #additionalCodeCoverageFiles: # Optional
        #failIfCoverageEmpty: false # Optional
      condition: succeededOrFailed()
      name: publishCoreCoverageCore
      displayName: Publishing Code Coverage for PowerShell Core





  # - powershell: |
  #     Get-ChildItem -Path env:
  #   displayName: Capture environment
  #   condition: succeededOrFailed()

  # - powershell:  Write-Host "##vso[build.updatebuildnumber]$env:BUILD_SOURCEBRANCHNAME-$env:BUILD_SOURCEVERSION-$((get-date).ToString("yyyyMMddhhmmss"))"
  #   displayName: Set Build Name for Non-PR
  #   condition: ne(variables['Build.Reason'], 'PullRequest')

  # - powershell: |
  #     git submodule update --init
  #   displayName: SubModule Init
  #   condition: succeededOrFailed()

  # - powershell: |
  #     [Net.ServicePointManager]::SecurityProtocol = [Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls12
  #     Import-Module .\tools\Appveyor.psm1
  #     Invoke-AppveyorInstall
  #   displayName: Bootstrap
  #   condition: succeededOrFailed()

  # - powershell: |
  #     Import-Module .\tools\Appveyor.psm1
  #     Invoke-AppveyorBuild
  #     Save-PSOptions
  #   displayName: Build
  #   condition: succeeded()

  # - powershell: |
  #     Import-Module .\tools\Appveyor.psm1
  #     Restore-PSOptions
  #     Invoke-AppveyorTest -Purpose '$(Purpose)'
  #   displayName: Test
  #   condition: succeeded()

  # - powershell: |
  #     Import-Module .\tools\Appveyor.psm1
  #     Restore-PSOptions
  #     Invoke-AppveyorAfterTest
  #   displayName: AfterTest
  #   condition: succeededOrFailed()

  # - powershell: |
  #     Import-Module .\tools\Appveyor.psm1
  #     Restore-PSOptions
  #     Invoke-AppveyorFinish
  #   displayName: Finish
  #   condition: eq(variables['Purpose'], 'ElevatedPesterTests_xUnit_Packaging')

    # - powershell: |
    #     "$a = 'aaa'"; $a
    #   name: setA
    #   displayName: Setting A
    #   condition: succeededOrFailed()
    #   enabled: false

    # - powershell: |
    #     $a
    #   name: getA
    #   displayName: Getting A
    #   condition: succeededOrFailed()
    #   enabled: false

    # - powershell: |
    #     # Invoke-Expression "& {$(Invoke-RestMethod https://aka.ms/install-pscore)} -AddToPath"
    #     Invoke-Expression "& {$(Invoke-RestMethod https://aka.ms/install-pscore)} -AddToPath -Destination `"$env:ProgramFiles\PowerShell`""
    #     $Env:Path -split [System.IO.Path]::PathSeparator
    #   name: installPowerShellCore
    #   displayName: Installing PowerShell Core
    #   condition: succeededOrFailed()
    #   enabled: false

    # - powershell: |
    #     $Path = [System.Environment]::GetEnvironmentVariable('Path','user')
    #     $Path = "$env:ProgramFiles\PowerShell" + [System.IO.Path]::PathSeparator + $path
    #     [System.Environment]::SetEnvironmentVariable('Path', $Path, 'user')
    #   name: userPath
    #   displayName: Setting User Path
    #   condition: succeededOrFailed()
    #   enabled: false

    # - powershell: |
    #     $Env:Path -split [System.IO.Path]::PathSeparator
    #   name: path
    #   displayName: Getting Path
    #   condition: succeededOrFailed()
    #   enabled: false

    # - powershell: |
    #     [System.Environment]::GetEnvironmentVariable("Path", "Machine") -split [System.IO.Path]::PathSeparator
    #   name: machinePath
    #   displayName: Getting Machine Path
    #   condition: succeededOrFailed()
    #   enabled: false

    # - powershell: |
    #     $Env:Path -split [System.IO.Path]::PathSeparator
    #   name: path2
    #   displayName: Getting Path 2
    #   condition: succeededOrFailed()
    #   enabled: false

  # # PowerShell!
  # # Run a PowerShell script on Windows, macOS, or Linux.!!
  #   - task: PowerShell@2
  #     name: pwsh
  #     displayName: PowerShell Core
  #     inputs:
  #       targetType: 'inline' # Optional. Options: filePath, inline
  #       #filePath: # Required when targetType == FilePath
  #       #arguments: # Optional
  #       #script: '# Write your powershell commands here.' # Required when targetType == Inline
  #       script: '$PSVersionTable' # Required when targetType == Inline
  #       #errorActionPreference: 'stop' # Optional. Options: stop, continue, silentlyContinue
  #       #failOnStderr: false # Optional
  #       #ignoreLASTEXITCODE: false # Optional
  #       pwsh: true # Optional
  #       #workingDirectory: # Optional

  # # Command Line
  # # Run a command line script using cmd.exe on Windows and bash on macOS and Linux.
  #   - task: CmdLine@2
  #     name: cmd
  #     displayName: Command Line Command
  #     inputs:
  #       # script: 'pwsh.exe -Command "& {$PSVersionTable}"'
  #       # script: 'pwsh.exe -Command "& {$PSVersionTable}"'
  #       script: '"%PROGRAMFILES%\PowerShell\pwsh.exe" -Command "& {$PSVersionTable}"'
  #       # script: 'echo Write your commands here.'
  #       #workingDirectory: # Optional
  #       #failOnStderr: false # Optional
  #     condition: succeededOrFailed()
  #     enabled: false


  #   - script: |
  #       "%PROGRAMFILES%\PowerShell\pwsh.exe" -Command "& {Get-Module -Name Pester -ListAvailable}"
  #       "%PROGRAMFILES%\PowerShell\pwsh.exe" -Command "& {Install-Module -Name Pester -MinimumVersion 4.4.0 -Repository PSGallery -SkipPublisherCheck -Force}"
  #       "%PROGRAMFILES%\PowerShell\pwsh.exe" -Command "& {Get-Module -Name Pester -ListAvailable}"
  #     workingDirectory: #
  #     name: PSCore_InstallPester
  #     displayName: PowerShell Core - Install Pester
  #     # failOnStderr: #
  #     # env:  # mapping of environment variables to add
  #     condition: succeededOrFailed()
  #     enabled: false
  
      # - script: |
      #   "%PROGRAMFILES%\PowerShell\pwsh.exe" -Command "& {Invoke-Pester .\Tests\sthTest.tests.ps1 -OutputFile .\testResultsCore.xml -OutputFormat NUnitXml -CodeCoverage .\sthTest.ps1 -CodeCoverageOutputFile .\codeCoverageCore.xml -CodeCoverageOutputFileFormat JaCoCo}"
      # workingDirectory: #
      # name: PSCore_Test
      # displayName: PowerShell Core - Testing
      # # failOnStderr: #
      # # env:  # mapping of environment variables to add
      # condition: succeededOrFailed()
      # enabled: false