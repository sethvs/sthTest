# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# pool:
#   vmImage: 'Ubuntu 16.04'

# steps:
# - script: echo Hello, world!
#   displayName: 'Run a one-line script'

# - script: |
#     echo Add other tasks to build, test, and deploy your project.
#     echo See https://aka.ms/yaml
#   displayName: 'Run a multi-line script'

name: PR-$(System.PullRequest.PullRequestNumber)-$(Date:yyyyMMdd)$(Rev:.rr)
queue:
  name: Hosted VS2017
  parallel: 2 # Limit to two agents at a time
  matrix:
    UnelevatedPesterTests:
      Purpose: UnelevatedPesterTests
    # ElevatedPesterTests_xUnit_Packaging:
    #   Purpose: ElevatedPesterTests_xUnit_Packaging

variables:
  GIT_CONFIG_PARAMETERS: "'core.autocrlf=false'"
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  POWERSHELL_TELEMETRY_OPTOUT: 1
  # Avoid expensive initialization of dotnet cli, see: http://donovanbrown.com/post/Stop-wasting-time-during-NET-Core-builds
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

resources:
- repo: self
  clean: true

steps:
  - powershell: |
      $PSVersionTable
    name: PSVersionTable
    displayName: Getting PSVersionTable variable
    condition: succeededOrFailed()

# PowerShell!
# Run a PowerShell script on Windows, macOS, or Linux.!!
- task: PowerShell@2
  inputs:
    targetType: 'inline' # Optional. Options: filePath, inline
    #filePath: # Required when targetType == FilePath
    #arguments: # Optional
    #script: '# Write your powershell commands here.' # Required when targetType == Inline
    script: '$PSVersionTable' # Required when targetType == Inline
    #errorActionPreference: 'stop' # Optional. Options: stop, continue, silentlyContinue
    #failOnStderr: false # Optional
    #ignoreLASTEXITCODE: false # Optional
    pwsh: true # Optional
    #workingDirectory: # Optional

  - powershell: |
      Install-Module -Name Pester -MinimumVersion 4.4.0 -Repository PSGallery -SkipPublisherCheck -Force
    name: installPester
    displayName: Install Pester
    condition: succeededOrFailed()

  - powershell: |
      Get-Module -Name Pester -ListAvailable
    name: pesterVersion
    displayName: Get Pester Version
    condition: succeededOrFailed()

  # - powershell: |
  #     Invoke-Pester -Script .\Tests\sthTest.tests.ps1 -CodeCoverage sthTest.ps1
  #   name: invokePester
  #   displayName: Testing with Pester
  #   condition: succeededOrFailed()

  - powershell: |
      Invoke-Pester .\Tests\sthTest.tests.ps1 -OutputFile .\testResults.xml -OutputFormat NUnitXml -CodeCoverage .\sthTest.ps1 -CodeCoverageOutputFile .\codeCoverage.xml -CodeCoverageOutputFileFormat JaCoCo
    name: invokePester
    displayName: Testing with Pester
    condition: succeededOrFailed()

  - powershell: |
      Get-ChildItem
    name: getChildItem
    displayName: Getting Child Items
    condition: succeededOrFailed()

# Publish Test Results
# Publish Test Results to Azure Pipelines/TFS
  - task: PublishTestResults@2
    inputs:
      testRunner: 'NUnit' # Options: JUnit, NUnit, VSTest, XUnit
      testResultsFiles: 'testResults.xml' 
      searchFolder: '$(System.DefaultWorkingDirectory)' # Optional
      #mergeTestResults: false # Optional
      #testRunTitle: # Optional
      #platform: # Optional
      #configuration: # Optional
      #publishRunAttachments: true # Optional

# Publish Code Coverage Results
# Publish Cobertura or JaCoCo code coverage results from a build
  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: 'JaCoCo' # Options: cobertura, jaCoCo
      # summaryFileLocation: codeCoverage.xml
      summaryFileLocation: $(System.DefaultWorkingDirectory)/codeCoverage.xml
      #reportDirectory: # Optional
      #additionalCodeCoverageFiles: # Optional
      #failIfCoverageEmpty: false # Optional

  # - powershell: |
  #     Get-ChildItem -Path env:
  #   displayName: Capture environment
  #   condition: succeededOrFailed()

  # - powershell:  Write-Host "##vso[build.updatebuildnumber]$env:BUILD_SOURCEBRANCHNAME-$env:BUILD_SOURCEVERSION-$((get-date).ToString("yyyyMMddhhmmss"))"
  #   displayName: Set Build Name for Non-PR
  #   condition: ne(variables['Build.Reason'], 'PullRequest')

  # - powershell: |
  #     git submodule update --init
  #   displayName: SubModule Init
  #   condition: succeededOrFailed()

  # - powershell: |
  #     [Net.ServicePointManager]::SecurityProtocol = [Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls12
  #     Import-Module .\tools\Appveyor.psm1
  #     Invoke-AppveyorInstall
  #   displayName: Bootstrap
  #   condition: succeededOrFailed()

  # - powershell: |
  #     Import-Module .\tools\Appveyor.psm1
  #     Invoke-AppveyorBuild
  #     Save-PSOptions
  #   displayName: Build
  #   condition: succeeded()

  # - powershell: |
  #     Import-Module .\tools\Appveyor.psm1
  #     Restore-PSOptions
  #     Invoke-AppveyorTest -Purpose '$(Purpose)'
  #   displayName: Test
  #   condition: succeeded()

  # - powershell: |
  #     Import-Module .\tools\Appveyor.psm1
  #     Restore-PSOptions
  #     Invoke-AppveyorAfterTest
  #   displayName: AfterTest
  #   condition: succeededOrFailed()

  # - powershell: |
  #     Import-Module .\tools\Appveyor.psm1
  #     Restore-PSOptions
  #     Invoke-AppveyorFinish
  #   displayName: Finish
  #   condition: eq(variables['Purpose'], 'ElevatedPesterTests_xUnit_Packaging')
